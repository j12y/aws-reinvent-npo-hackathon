'use strict';

const AWS = require('aws-sdk');

const rekognition = new AWS.Rekognition();
const TEST_IMAGE = new Buffer('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', 'base64');

module.exports.image = async (event, context) => {
  // https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Rekognition.html#detectLabels-property
  return rekognition.detectLabels({
    "Image": {
       "Bytes": TEST_IMAGE
    }
  }).promise()
    .then(data => {
      console.log('success', data);
      return {
        statusCode: 200,
        body: JSON.stringify(data),
      };
    })
    .catch(err => {
      console.log('error', err);
      return {
        statusCode: 400,
        body: JSON.stringify(err),
      };
    });
};
